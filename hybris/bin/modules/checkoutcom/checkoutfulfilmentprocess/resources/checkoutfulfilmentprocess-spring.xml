<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <!-- Listeners -->

    <alias name="defaultPickupConfirmationEventListener" alias="pickupConfirmationEventListener"/>
    <bean id="defaultPickupConfirmationEventListener"
          class="com.checkout.hybris.fulfilmentprocess.listeners.PickupConfirmationEventListener"
          parent="abstractEventListener">
        <property name="businessProcessService" ref="businessProcessService"/>
    </bean>

    <alias name="defaultCreateReturnEventListener" alias="createReturnEventListener"/>
    <bean id="defaultCreateReturnEventListener"
          class="com.checkout.hybris.fulfilmentprocess.listeners.DefaultCreateReturnEventListener"
          parent="abstractEventListener">
        <constructor-arg ref="baseStoreService"/>
        <constructor-arg ref="businessProcessService"/>
        <constructor-arg ref="modelService"/>
        <constructor-arg name="supportedSiteChannels">
            <set value-type="de.hybris.platform.commerceservices.enums.SiteChannel">
                <ref bean="SiteChannel.B2C"/>
            </set>
        </constructor-arg>
    </bean>

    <!-- Process Adapters -->

    <alias name="mockProcess2WarehouseAdapter" alias="process2WarehouseAdapter"/>
    <bean id="mockProcess2WarehouseAdapter"
          class="com.checkout.hybris.fulfilmentprocess.warehouse.MockProcess2WarehouseAdapter">
        <property name="modelService" ref="modelService"/>
        <property name="warehouse2ProcessAdapter" ref="warehouse2ProcessAdapter"/>
        <property name="timeService" ref="timeService"/>
    </bean>

    <alias name="defaultWarehouse2ProcessAdapter" alias="warehouse2ProcessAdapter"/>
    <bean id="defaultWarehouse2ProcessAdapter"
          class="com.checkout.hybris.fulfilmentprocess.warehouse.DefaultWarehouse2ProcessAdapter">
        <property name="modelService" ref="modelService"/>
        <property name="statusMap">
            <map key-type="de.hybris.platform.warehouse.WarehouseConsignmentStatus"
                 value-type="de.hybris.platform.commerceservices.enums.WarehouseConsignmentState">
                <entry key="CANCEL" value="CANCEL"/>
                <entry key="COMPLETE" value="COMPLETE"/>
                <entry key="PARTIAL" value="PARTIAL"/>
            </map>
        </property>
        <property name="businessProcessService" ref="businessProcessService"/>
    </bean>

    <!-- Process Definitions -->

    <bean id="orderProcessDefinitionResource"
          class="de.hybris.platform.processengine.definition.ProcessDefinitionResource">
        <property name="resource" value="classpath:/checkoutfulfilmentprocess/process/order-process.xml"/>
    </bean>

    <bean id="consignmentProcessDefinitionResource"
          class="de.hybris.platform.processengine.definition.ProcessDefinitionResource">
        <property name="resource" value="classpath:/checkoutfulfilmentprocess/process/consignment-process.xml"/>
    </bean>

    <bean id="returnProcessDefinitionResource"
          class="de.hybris.platform.processengine.definition.ProcessDefinitionResource">
        <property name="resource" value="classpath:/checkoutfulfilmentprocess/process/return-process.xml"/>
    </bean>

    <bean id="voidProcessDefinitionResource"
          class="de.hybris.platform.processengine.definition.ProcessDefinitionResource">
        <property name="resource" value="classpath:/checkoutfulfilmentprocess/process/void-process.xml"/>
    </bean>

    <!-- Process Actions -->

    <import resource="/checkoutfulfilmentprocess/process/order-process-spring.xml"/>
    <import resource="/checkoutfulfilmentprocess/process/consignment-process-spring.xml"/>
    <import resource="/checkoutfulfilmentprocess/process/return-process-spring.xml"/>
    <import resource="/checkoutfulfilmentprocess/process/void-process-spring.xml"/>

    <!-- Order Check Service -->
    <!-- Performs some basic validation for the order as part of the first stage of the process. -->

    <alias name="defaultCheckOrderService" alias="checkOrderService"/>
    <bean id="defaultCheckOrderService" class="com.checkout.hybris.fulfilmentprocess.impl.DefaultCheckOrderService"/>

    <!-- Order Splitting -->
    <alias name="checkoutfulfilmentprocessOrderSplittingService" alias="orderSplittingService"/>
    <bean id="checkoutfulfilmentprocessOrderSplittingService" parent="defaultOrderSplittingService">
        <property name="strategiesList">
            <list>
                <ref bean="splitByAvailableCount"/>
                <ref bean="splitByDeliveryMode"/>
                <ref bean="splitByPoS"/>
                <ref bean="splitByNamedDeliveryDate"/>
                <ref bean="splitByEntryDeliveryAddress"/>
                <ref bean="splitByWarehouse"/>
            </list>
        </property>
    </bean>

    <!-- Split Strategies -->

    <alias name="defaultSplitByPoS" alias="splitByPoS"/>
    <bean id="defaultSplitByPoS" class="com.checkout.hybris.fulfilmentprocess.strategy.impl.SplitByPoS"/>

    <alias name="defaultSplitByEntryDeliveryAddress" alias="splitByEntryDeliveryAddress"/>
    <bean id="defaultSplitByEntryDeliveryAddress"
          class="com.checkout.hybris.fulfilmentprocess.strategy.impl.SplitByEntryDeliveryAddress"/>

    <alias name="defaultSplitByDeliveryMode" alias="splitByDeliveryMode"/>
    <bean id="defaultSplitByDeliveryMode"
          class="com.checkout.hybris.fulfilmentprocess.strategy.impl.SplitByDeliveryMode">
        <property name="pickupDeliveryModeDao" ref="pickupDeliveryModeDao"/>
    </bean>

    <alias name="defaultSplitByAvailableCount" alias="splitByAvailableCount"/>
    <bean id="defaultSplitByAvailableCount"
          class="com.checkout.hybris.fulfilmentprocess.strategy.impl.SplitByAvailableCount">
        <property name="commerceStockService" ref="commerceStockService"/>
    </bean>

    <alias name="defaultSplitByWarehouse" alias="splitByWarehouse"/>
    <bean id="defaultSplitByWarehouse" class="com.checkout.hybris.fulfilmentprocess.strategy.impl.SplitByWarehouse">
        <property name="stockService" ref="stockService"/>
        <property name="commerceAvailabilityCalculationStrategy" ref="commerceStockLevelCalculationStrategy"/>
    </bean>

    <!--  Jobs -->

    <bean id="cleanUpFraudOrderJob" class="com.checkout.hybris.fulfilmentprocess.jobs.CleanUpFraudOrderJob">
        <property name="modelService" ref="modelService"/>
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
        <property name="businessProcessService" ref="businessProcessService"/>
        <property name="sessionService" ref="sessionService"/>
    </bean>

    <!--  Jobs -->

    <alias name="defaultCheckoutComCancelNotificationServiceAdapter"
           alias="checkoutComCancelNotificationServiceAdapter"/>
    <bean id="defaultCheckoutComCancelNotificationServiceAdapter"
          class="com.checkout.hybris.fulfilmentprocess.adapters.voids.CheckoutComCancelNotificationServiceAdapter">
        <constructor-arg ref="eventService"/>
    </bean>

    <alias name="checkoutComImmediateCancelRequestExecutor" alias="immediateCancelRequestExecutor"/>
    <bean id="checkoutComImmediateCancelRequestExecutor"
          class="de.hybris.platform.ordercancel.impl.executors.ImmediateCancelRequestExecutor"
          scope="prototype">
        <property name="modelService" ref="modelService"/>
        <property name="orderCancelRecordsHandler" ref="orderCancelRecordsHandler"/>
        <property name="completeCancelStatusChangeStrategy" ref="setCancellledStrategy"/>
        <property name="notificationServiceAdapter" ref="checkoutComCancelNotificationServiceAdapter"/>
    </bean>

    <alias name="defaultCheckoutComCancelFinishedEventListener" alias="checkoutComCancelFinishedEventListener"/>
    <bean id="defaultCheckoutComCancelFinishedEventListener"
          class="com.checkout.hybris.fulfilmentprocess.voids.listeners.CheckoutComCancelFinishedEventListener"
          parent="abstractEventListener">
        <constructor-arg ref="businessProcessService"/>
        <constructor-arg ref="modelService"/>
    </bean>
</beans>
